iphoneCor
corrplot(iphoneCor, method = "circle")
corrplot(iphoneCor, order = "hclust", addrect = 2)
nzvMetrics <- nearZeroVar(iphoneDF, saveMetrics = TRUE)
nzvMetrics
nzv <- nearZeroVar(iphoneDF, saveMetrics = FALSE)
nzr
nzv
iphoneNZV <- iPhoneDF[,-nzv]
iphoneNZV <- iphoneDF[,-nzv]
str(iphoneNZV)
set.seed(123)
iphoneSample <- iphoneDF[sample(1:nrow(iphoneDF), 1000, replace=FALSE),]
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
rfeResults <- rfe(iphoneSample[,1:58],
iphoneSample$iphonesentiment,
sizes=(1:58),
rfeControl=ctrl)
rfeResults <- rfe(iphoneSample[,1:58],
iphoneSample$iphonesentiment,
sizes=(1:58),
rfeControl=ctrl)
library(caret)
library(corrplot)
library(plotly)
set.seed(123)
rfeResults <- rfe(iphoneSample[,1:58], iphoneSample$iphonesentiment, sizes=(1:58), rfeControl=ctrl)
rfeResults
plot(rfeResults, type=c("g", "o"))
iphoneRFE <- iphoneDF[,predictors(rfeResults)]
iphoneRFE$iphonesentiment <- iphoneDF$iphonesentiment
str(iPhoneRFE)
str(iphoneRFE)
iphoneDF$iphonesentiment <- factor(iphoneDF$iphonesentiment)
str(iphoneDF)
iphoneDF$iphonesentiment
set.seed(998)
IntrainingDF<- createDataPartition(CompleteResponses$brand, p=.70, list=FALSE)
IntrainingDF<- createDataPartition(iphoneDF$iphonesentiment, p=.70, list=FALSE)
TrainingDF <- iphoneDF[IntrainingDF,]
TestingDF <- iphoneDF[-IntrainingDF,]
>Fitcontrol<- traincontrol(method="repeatdcv" , number = 10, repeats = 1)
Fitcontrol<- traincontrol(method="repeatdcv" , number = 10, repeats = 1)
install.packages("trainsontrol")
install.packages("traincontrol")
Fitcontrol<- traincontrol(method="repeatdcv" , number = 10, repeats = 1)
Fitcontrol <- traincontrol(method="repeatdcv" , number = 10, repeats = 1)
fitcontrol <- traincontrol(method="repeatdcv" , number = 10, repeats = 1)
rfGrid<- expand.grid(mtry=c(1,2,3,4,5))
library(caret)
fitcontrol <- traincontrol(method="repeatdcv" , number = 10, repeats = 1)
fitcontrol <- trainControl(method = "repeatdcv", number = 10)
fitcontrol <- trainControl(method = "repeatdcv", number = 10, repeats = 1)
set.seed(998)
fitcontrol <- trainControl(method = "repeatdcv", number = 10, repeats = 1)
system.time(rfiphoneDF <- train(iphonesentiment~., data = TrainingDF, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid))
str(iphoneDF)
system.time(rfiphoneDF <- train(iphonesentiment~., data = TrainingDF, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid))
library(randomForest)
system.time(rfiphoneDF <- train(iphonesentiment~., data = TrainingDF, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid))
system.time(rfiphoneDF <- train(iphonesentiment~., data = TrainingDF, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid))
fitcontrol <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
system.time(rfiphoneDF <- train(iphonesentiment~., data = TrainingDF, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid))
View(ctrl)
rfiphoneDF
varImp(rfiphoneDF)
CiphoneDF<- train(iphonesentiment ~ ., data = TrainingDF, method = "C5.0", trcontrol=fitcontrol, tuneLength = 5)
warning(CiphoneDF)
CiphoneDF
install.packages("e1071")
install.packages("e1071")
library(e1071)
SVMiphoneDF <- svm(iphonesentiment ~ . , TrainingDF)
SVMiphoneDF
View(SVMiphoneDF)
svmiphone <- train(iphonesentiment ~., data = TrainingDF, method = "svmLinear", trControl=fitcontrol, preProcess = c("center", "scale"), tuneLength = 10)
library(caret)
svmiphone <- train(iphonesentiment ~., data = TrainingDF, method = "svmLinear", trControl=fitcontrol, preProcess = c("center", "scale"), tuneLength = 10)
svmiphone
gbiphoneDF <- gbm( formula = iphonesentiment ~ ., data=TrainingDF , distribution = "gaussian",n.trees = 10000, shrinkage = 0.01, interaction.depth = 4)
install.packages("gbm")
library(gbm)
gbiphoneDF <- gbm( formula = iphonesentiment ~ ., data=TrainingDF , distribution = "gaussian",n.trees = 10000, shrinkage = 0.01, interaction.depth = 4)
gbiphoneDF
library(caret)
library(gbm)
library(e1071)
install.packages("kknn")
library(kknn)
gbiphoneDF
library(doParallel)
detectCores()
cl <- makeCluster(2)
registerDoParallel(cl)
getDoParWorkers()
gbiphoneDF <- gbm( formula = iphonesentiment ~ ., data=TrainingDF , distribution = "gaussian",n.trees = 1000, shrinkage = 0.01, interaction.depth = 4)
gbiphoneDF
set.seed(998)
kknniphoneDF=train.kknn(iphonesentiment ~ ., data = TrainingDF, kmax = 100, kernel = c("optimal","rectangular", "inv", "gaussian", "triangular"), scale = TRUE)
kknniphoneDF
knnpred <- predict(kknniphoneDF, TestingDF)
knnpred
knnpred_bin<-round(knnpred)
knnpred
rfpred <- predict(rfiphoneDF, TestingDF)
rfpred
table(rfpred, TestingDF$iphonesentiment)
Cpred <- predict(CiphoneDF, TestingDF)
table(Cpred, TestingDF$iphonesentiment)
SVMpred <- predict(SVMiphoneDF, TestingDF)
table(SVMpred, TestingDF$iphonesentiment)
GBpred <- predict(gbiphoneDF, TestingDF)
gbpred <- predict(gbiphoneDF, newdata = TestingDF, n.trees = gbiphoneDF$n.trees)
table(prebd, TestingDF$iphonesentiment)
gbpred
postResample(rfiphoneDF, TestingDF$iphonesentiment)
postResample(rfpred, TestingDF$iphonesentiment)
postResample(Cpred, TestingDF$iphonesentiment)
postResample(SVMpred, TestingDF$iphonesentiment)
postResample(knnpred, TestingDF$iphonesentiment)
kknnpred <- predict(kknniphoneDF, TestingDF)
postResample(kknnpred, TestingDF$iphonesentiment)
postResample(gbpred, TestingDF$iphonesentiment)
summary(gbiphoneDF)
summary(gbiphoneDF)
cmRF <- confusionMatrix(rfpred, testing$iphonesentiment)
cmRF <- confusionMatrix(rfpred, TestingDF$iphonesentiment)
cmRF
View(iphoneRFE)
summary(rfpred)
cmC <- confusionMatrix(Cpred, TestingDF$iphonesentiment)
cmC
summary(Cpred)
summary(SVMpred)
summary(kknnpred)
cmC <- confusionMatrix(SVMpred, TestingDF$iphonesentiment)
cmC <- confusionMatrix(Cpred, TestingDF$iphonesentiment)
cmSVM <- confusionMatrix(SVMpred, TestingDF$iphonesentiment)
cmSVM
cmkknn <- confusionMatrix(kknnpred, TestingDF$iphonesentiment)
cmkknn
IntrainingRFE<- createDataPartition(iphoneRFE$iphonesentiment, p=.70, list=FALSE)
TrainingRFE <- iphoneRFE[IntrainingRFE,]
TestingRFE <- iphoneRFE[-IntrainingRFE,]
system.time(rfiphoneRFE <- train(iphonesentiment~., data = TrainingRFE, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid))
rfiphoneRFE
summary(rfiphoneRFE)
rfpredRFE <- predict(rfiphoneRFE, TestingRFE$iphonesentiment)
rfpredRFE <- predict(rfiphoneRFE, TestingRFE)
rfpredRFE
summary(rfpredRFE)
cmRF_RFE <- confusionMatrix(rfpredRFE, TestingRFE$iphonesentiment)
cmRF_RFE <- confusionMatrix(rfpredRFE, TestingRFE$iphonesentiment)
str(iphoneRFE)
iphoneRFE$iphonesentiment <- factor(iphoneRFE$iphonesentiment)
str(iphoneRFE)
system.time(rfiphoneRFE <- train(iphonesentiment~., data = TrainingRFE, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid))
rfiphoneRFE
str(TrainingRFE)
TrainingRFE$iphonesentiment <- factor(TrainingRFE$iphonesentiment)
TestingRFE$iphonesentiment <- factor(TestingRFE$iphonesentiment)
str(TrainingRFE)
rfiphoneRFE
system.time(rfiphoneRFE <- train(iphonesentiment~., data = TrainingRFE, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid))
rfiphoneRFE
cmRF_RFE <- confusionMatrix(rfpredRFE, TestingRFE$iphonesentiment)
cmRF_RFE <- confusionMatrix(rfpredRFE, TestingRFE$iphonesentiment)
str(TrainingRFE)
str(TestingRFE)
rfpredRFE <- predict(rfiphoneRFE, TestingRFE)
cmRF_RFE <- confusionMatrix(rfpredRFE, TestingRFE$iphonesentiment)
cmRF_RFE
CiphoneRFE<- train(iphonesentiment ~ ., data = TrainingRFE, method = "C5.0", trcontrol=fitcontrol, tuneLength = 5)
CiphoneRFE
CpredRFE <- predict(CiphoneRFE, TestingRFE)
cmC_RFE <- confusionMatrix(CpredRFE, TestingRFE$iphonesentiment)
cmC_RFE
library(caret)
library(InformationValue)
install.packages("InformationValue")
install.packages("InformationValue")
library(InformationValue)
actual <- as.numeric(as.character(TestingRFE$iphonesentiment))
predrf <- as.numeric(as.character(rfpredRFE))
recall(actual, predrf)
precision(actual, predrf)
fscore(actual, predrf)
install.packages("fscore")
library(fscore)
library(caret)
library(doParallel)
cll <- makeCluster(2)
registerDoParallel(cll)
getDoParWorkers()
svmiphoneRFE <- train(iphonesentiment ~., data = TrainingRFE, method = "svmLinear", trControl=fitcontrol, preProcess = c("center", "scale"), tuneLength = 10)
svmiphoneRFE
set.seed(998)
svmiphoneRFE <- train(iphonesentiment ~., data = TrainingRFE, method = "svmLinear", trControl=fitcontrol, preProcess = c("center", "scale"), tuneLength = 10)
svmiphoneRFE
SVMpredRFE <- predict(svmiphoneRFE, TestingRFE)
cmSVMpredRFE <- confusionMatrix(SVMpredRFE, TestingRFE$iphonesentiment)
cmSVMpredRFE
head(rfpredRFE)
library(caret)
iphoneRC <- iphoneDF
iphoneRC$iphonesentiment <- recode(iphoneRC$iphonesentiment, '0' = 1, '1' = 1, '2' = 2, '3' = 3, '4' = 4, '5' = 4)
library(dplyr)
iphoneRC$iphonesentiment <- recode(iphoneRC$iphonesentiment, '0' = 1, '1' = 1, '2' = 2, '3' = 3, '4' = 4, '5' = 4)
summary(iphoneRC)
str(iphoneRC)
iphoneRC$iphonesentiment <- as.factor(iphoneRC$iphonesentiment)
str(iphoneRC)
set.seed(998)
IntrainingRC<- createDataPartition(iphoneRC$iphonesentiment, p=.70, list=FALSE)
TrainingRC <- iphoneRC[IntrainingRC,]
TestingRC <- iphoneRC[-IntrainingRC,]
library(doParallel)
cl3 <- makeCluster(2)
registerDoParallel(cl3)
getDoParWorkers()
system.time(rfiphoneRC <- train(iphonesentiment~., data = TrainingRC, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid))
rfiphoneRC
CiphoneRC<- train(iphonesentiment ~ ., data = TrainingRC, method = "C5.0",
trcontrol=fitcontrol, tuneLength = 5)
CiphoneRC
rfpredRC <- predict(rfiphoneRC, TestingRC$iphonesentiment)
rfpredRC <- predict(rfiphoneRC, TestingR)
rfpredRC <- predict(rfiphoneRC, TestingRC)
rfCMRC <- confusionMatrix(rfpredRC, TestingRC$iphonesentiment)
rfCMRC
CpredRC <- predict(CiphoneRC, TestingRC)
CcmRC <- confusionMatrix(CpredRC, TestingRC$iphonesentiment)
CcmRC
preprocessParams <- preProcess(training[,-59], method=c("center", "scale", "pca"), thresh = 0.95)
preprocessParams <- preProcess(TrainingDF[,-59], method=c("center", "scale", "pca"), thresh = 0.95)
print(preprocessParams)
TrainingDF <- iphoneDF[IntrainingDF,]
Training <- iphoneDF[IntrainingDF,]
Training$iphonesentiment <- NULL
str(Training)
preprocessParams <- preProcess(Training[,-59], method=c("center", "scale", "pca"), thresh = 0.95)
Training <- iphoneDF[IntrainingDF,]
str(Training)
preprocessParams <- preProcess(Training[,-59], method=c("center", "scale", "pca"), thresh = 0.95)
print(preprocessParams)
preprocessParams <- preProcess(Training[,-59], method=c("center", "scale", "pca"), thresh = 0.85)
print(preprocessParams)
preprocessParams <- preProcess(Training[,-59], method=c("center", "scale", "pca"), thresh = 0.80)
print(preprocessParams)
preprocessParams <- preProcess(Training[,-59], method=c("center", "scale", "pca"), thresh = 0.90)
print(preprocessParams)
preprocessParams <- preProcess(Training[,-59], method=c("center", "scale", "pca"), thresh = 0.95)
print(preprocessParams)
train.pca <- predict(preprocessParams, training[,-59])
train.pca <- predict(preprocessParams, Training[,-59])
train.pca$iphonesentiment <- Training$iphonesentiment
Testing <- iphoneDF[-IntrainingDF,]
test.pca <- predict(preprocessParams, Testing[,-59])
test.pca$iphonesentiment <- testing$iphonesentiment
test.pca$iphonesentiment <- Testing$iphonesentiment
str(train.pca)
str(test.pca)
> CiphonePCA<- train(iphonesentiment ~ ., data = train.pca, method = "C5.0",
+                    trcontrol=fitcontrol, tuneLength = 5)
CiphonePCA<- train(iphonesentiment ~ ., data = train.pca, method = "C5.0",
+                    trcontrol=fitcontrol, tuneLength = 5)
CiphonePCA<- train(iphonesentiment ~ ., data = train.pca, method = "C5.0", trcontrol=fitcontrol, tuneLength = 5)
CiphonePCA
rfiphonePCA<- train(iphonesentiment~., data = train.pca, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid)
rfiphonePCA
rfpredPCS <- predict(rfiphonePCA, Testing$iphonesentiment)
rfpredPCA <- predict(rfiphonePCA, Testing)
rfpredPCA <- predict(rfiphonePCA, test.pca)
rfCMPCA <- confusionMatrix(rfpredPCA, test.pca$iphonesentiment)
rfCMPCA
CpredPCA <- predict(CiphonePCA, test.pca)
CcmPCA <- confusionMatrix(CpredPCA, test.pca$iphonesentiment)
CcmPCA
library(caret)
library(readr)
iphoneLargeMatrix <- read_csv("~/UT Data Analytics Course/Course 4/Task 3 - Predict Sentiment/iphoneLargeMatrix.csv")
View(iphoneLargeMatrix)
str(iphoneLargeMatrix)
View(CiphoneDF)
View(iphoneDF)
library(caret)
library(doParallel)
cl4 <- makeCluster(2)
registerDoParallel(cl4)
getDoParWorkers()
View(iphoneNZV)
set.seed(998)
IntrainingNZV<- createDataPartition(iphoneNZV$iphonesentiment, p=.70, list=FALSE)
TrainingNZV <- iphoneNZV[IntrainingNZV,]
TestingNZV <- iphoneNZV[-IntrainingNZV,]
CiphoneNZF<- train(iphonesentiment ~ ., data = TrainingNZF, method = "C5.0", trcontrol=fitcontrol, tuneLength = 5)
CiphoneNZF<- train(iphonesentiment ~ ., data = TrainingNZV, method = "C5.0", trcontrol=fitcontrol, tuneLength = 5)
iphoneNZV$iphonesentiment <- as.factor(iphoneNZV$iphonesentiment)
IntrainingNZV<- createDataPartition(iphoneNZV$iphonesentiment, p=.70, list=FALSE)
TrainingNZV <- iphoneNZV[IntrainingNZV,]
TestingNZV <- iphoneNZV[-IntrainingNZV,]
CiphoneNZF<- train(iphonesentiment ~ ., data = TrainingNZV, method = "C5.0", trcontrol=fitcontrol, tuneLength = 5)
CiphoneNZF
LargeMatrixPred <- predict(CiphoneRC, iphoneLargeMatrix)
LargeMatrixPred
str(LargeMatrixPred)
summary(LargeMatrixPred)
library(readr)
galaxysmallmatrix <- read_csv("~/UT Data Analytics Course/Course 4/Task 3 - Predict Sentiment/galaxy_smallmatrix_labeled_9d.csv")
View(galaxysmallmatrix)
str(galaxysmallmatrix)
galaxyDF <- galaxysmallmatrix
galaxyDF$galaxysentiment <- as.factor(galaxyDF$galaxysentiment)
str(galaxyDF)
library(plotly)
plot_ly(galaxyDF, x= ~galaxyDF$galaxysentiment, type='histogram')
is.na(galaxyDF)
sum(is.na(galaxyDF))
library(corrplot)
galaxyCor <- cor(galaxyDF)
str(iphoneDF)
galaxyCor <- cor(galaxyDF)
galaxyDF <- galaxysmallmatrix
galaxyCor <- cor(galaxyDF)
corrplot(galaxyCor)
nzvLarge <- nearZeroVar(galaxysmallmatrix, saveMetrics = True)
nzvLarge <- nearZeroVar(galaxysmallmatrix, saveMetrics = TRUE)
nzvLarge
nzvgalaxy <- nearZeroVar(iphoneDF, saveMetrics = FALSE)
nzvgalaxy
galaxynzv <- galaxysmallmatrix[,-nzvgalaxy]
View(galaxynzv)
str(nzvgalaxy)
galaxySample <- galaxyDF[sample(1:nrow(galaxyDF), 1000, replace=FALSE),]
rfeResults <- rfe(galaxySample[,1:58], galaxySample$iphonesentiment, sizes=(1:58),     rfeControl=ctrl)
rfeResults <- rfe(galaxySample[,1:58], galaxySample$galaxysentiment, sizes=(1:58),     rfeControl=ctrl)
str(nzvgalaxy)
library(caret)
library(doParallel)
cl5 <- makeCluster(2)
registerDoParallel(cl5)
rfeResults <- rfe(galaxySample[,1:58], galaxySample$galaxysentiment, sizes=(1:58),     rfeControl=ctrl)
rfeResults
plot(rfeResults, type=c("g", "o"))
galaxyRFE <- galaxyDF[,predictors(rfeResults)]
galaxyRFE$iphonesentiment <- galaxyDF$iphonesentiment
galaxyRFE$galaxysentiment <- galaxyDF$galaxysentiment
str(galaxyRFE)
galaxyRFE$galaxysentiment <- as.factor(galaxyRFE$galaxysentiment)
str(galaxyRFE)
library(caret)
library(doParallel)
cl6 <- makeCluster(2)
registerDoParallel(cl6)
getDoParWorkers()
set.seed(998)
IntrainingGDF<- createDataPartition(galaxyDF$galaxysentiment, p=.70, list=FALSE)
TrainingGDF <- galaxyDF[IntrainingGDF,]
TestingGDF <- galaxyDF[-IntrainingGDF,]
rfgalaxyDF <- train(galaxysentiment~., data = TrainingGDF, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid)
rfgalaxyDF
str(galaxysmallmatrix)
str(galaxyDF)
galaxyDF$galaxysentiment <- as.factor(galaxyDF$galaxysentiment)
IntrainingGDF<- createDataPartition(galaxyDF$galaxysentiment, p=.70, list=FALSE)
TrainingGDF <- galaxyDF[IntrainingGDF,]
TestingGDF <- galaxyDF[-IntrainingGDF,]
rfgalaxyDF <- train(galaxysentiment~., data = TrainingGDF, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid)
rfgalaxyDF
CgalaxyDF<- train(galaxysentiment ~ ., data = TrainingGDF, method = "C5.0", trcontrol=fitcontrol, tuneLength = 5)
CgalaxyDF
library(e1071)
svmgalaxyDF <- train(galaxysentiment ~., data = TrainingGDF, method = "svmLinear", trControl=fitcontrol, preProcess = c("center", "scale"), tuneLength = 10)
svmgalaxyDF
kknngalaxyDF=train.kknn(galaxysentiment ~ ., data = TrainingGDF, kmax = 100, kernel = c("optimal","rectangular", "inv", "gaussian", "triangular"), scale = TRUE)
kknngalaxyDF <- train.kknn(galaxysentiment ~ ., data = TrainingGDF, kmax = 100, kernel = c("optimal","rectangular", "inv", "gaussian", "triangular"), scale = TRUE)
install.packages(""kknn)
install.packages("kknn")
kknngalaxyDF <- train.kknn(galaxysentiment ~ ., data = TrainingGDF, kmax = 100, kernel = c("optimal","rectangular", "inv", "gaussian", "triangular"), scale = TRUE)
library(kknn)
kknngalaxyDF <- train.kknn(galaxysentiment ~ ., data = TrainingGDF, kmax = 100, kernel = c("optimal","rectangular", "inv", "gaussian", "triangular"), scale = TRUE)
kknngalaxyDF
data()
library(caret)
library(doParallel)
rm(cl)
rm(cll)
rm(cl2)
rm(cl3)
rm(cl4)
rm(cl5)
rm(cl6)
cl <- makeCluster(2)
registerDoParallel(cl)
getDoParWorkers()
CpredGDF <- predict(rfgalaxyDF, TestingGDF)
CpredGDF
postResample(CpredGDF,TestingGDF$galaxysentiment)
rfpredGDF <- predict(rfgalaxyDF, TestingGDF)
postResample(rfpredGDF, TestingGDF$galaxysentiment)
SVMpredGDF <- predict(svmgalaxyDF, TestingGDF)
postResample(SVMpredGDF, TestingGDF$galaxysentiment)
kknnpredGDF <- predict(kknngalaxyDF, TestingGDF)
library(kknn)
kknnpredGDF <- predict(kknngalaxyDF, TestingGDF)
postResample(kknnpredGDF, TestingGDF$galaxysentiment)
CMrfpredG <- confusionMatrix(rfpredGDF, TestingGDF$galaxysentiment)
CMfpredG
CrMfpredG
CMrfpredG
CMCpredG <- confusionMatrix(CpredGDF, TestingGDF$galaxysentiment)
CMCpredG
CMkknnpredG <- confusionMatrix(kknnpredGDF, TestingGDF$galaxysentiment)
CMkknnpredG
CMSVMpredG <- confusionMatrix(SVMpredGDF, TestingGDF$galaxysentiment)
CMSVMpredG
library(caret)
postResample(gbpred, TestingDF$iphonesentiment)
str(galaxySample)
galaxySample$galaxysentiment <- as.factor(galaxySample$galaxysentiment)
str(galaxySample)
set.seed(988)
library(doParallel)
library(caret)
rm(cl)
cl <- makeCluster(2)
registerDoParallel(cl)
getDoParWorkers()
set.seed(988)
rfeResults <- rfe(galaxySample[,1:58], galaxySample$galaxysentiment, sizes=(1:58),     rfeControl=ctrl)
rfResults
rfeResults
library(caret)
summary(CpredRC)
library(plotly)
plot_ly(iphoneLargeMatrix, x= ~ iphoneLargeMatrix$iphonesentiment, type='histogram')
str(iphoneLargeMatrix)
library(caret)
library(doParallel)
rm(cl)
cl <- makeCluster(2)
registerDoParallel(cl)
getDoParWorkers()
summary(CMCpredG)
summary(CgalaxyDF)
summary(CpredGDF)
CpredGDF <- predict(CgalaxyDF, TestingGDF)
summary(CpredGDF)
set.seed(998)
CpredGDF <- predict(CgalaxyDF, TestingGDF)
summary(CpredGDF)
summary(rfpredGDF)
galaxyRC <- galaxyDF
str(galaxyRC)
galaxyRC$galaxysentiment <- recode(galaxyRC$galaxysentiment, '0' = 1, '1' = 1, '2' = 2, '3' = 3, '4' = 4, '5' = 4)
library(dplyr)
galaxyRC$galaxysentiment <- recode(galaxyRC$galaxysentiment, '0' = 1, '1' = 1, '2' = 2, '3' = 3, '4' = 4, '5' = 4)
str(galaxyRC)
galaxyRC$galaxysentiment <- as.factor(galaxyRC$galaxysentiment)
str(galaxyRC)
IntrainingGRC<- createDataPartition(galaxyRC$galaxysentiment, p=.70, list=FALSE)
TrainingGRC <- galaxyRC[IntrainingGRC,]
TestingGRC <- galaxyRC[-IntrainingGRC,]
system.time(rfgalaxyRC <- train(galaxysentiment~., data = TrainingGRC, method = "rf", trControl=fitcontrol, tuneGrid=rfGrid))
rfpredGRC <- predict(rfgalaxyRC, TestingGRC)
summary(rfpredGRC)
postResample(rfpredGRC, TestingGRC$galaxysentiment)
CgalaxyGRC<- train(galaxysentiment ~ ., data = TrainingGRC, method = "C5.0", trcontrol=fitcontrol, tuneLength = 5)
CpredGRC <- predict(CgalaxyGRC, TestingGRC)
summary(GpredGRC)
summary(CpredGRC)
postResample(CpredGRC, TestingGRC$galaxysentiment)
svmgalaxyRC <- train(galaxysentiment ~., data = TrainingGRC, method = "svmLinear", trControl=fitcontrol, preProcess = c("center", "scale"), tuneLength = 10)
svmpredGRC <- predict(svmpredGRC, TestingGRC)
svmpredGRC <- predict(svmgalaxyRC, TestingGRC)
summary(svmpredGRC)
postResample(svmpredGRC, TestingGRC$galaxysentiment)
kknngalaxyRC <- train.kknn(galaxysentiment ~ ., data = TrainingGRC, kmax = 100, kernel = c("optimal","rectangular", "inv", "gaussian", "triangular"), scale = TRUE)
library(kknn)
kknngalaxyRC <- train.kknn(galaxysentiment ~ ., data = TrainingGRC, kmax = 100, kernel = c("optimal","rectangular", "inv", "gaussian", "triangular"), scale = TRUE)
kknnpredGRC <- predict(kknngalaxyRC, TestingGRC)
summary(kknnpredGRC)
postResample(kknnpredGRC, TestingGRC$galaxysentiment)
CMkknnpredGRC <- confusionMatrix(kknnpredGRC, TestingGRC$galaxysentiment)
CMkknnpredGRC
CMCpredGRC <- confusionMatrix(CpredGRC, TestingGRC$galaxysentiment)
CMCpredGRC
CMrfpredGRC <- confusionMatrix(rfpredGRC, TestingGRC$galaxysentiment)
CMrfpredGRC
CMsvmpredGRC <- confusionMatrix(svmpredGRC, TestingGRC$galaxysentiment)
CMsvmpredGRC
plot(iPhoneLargeMatrix$iphoneSentiment, ylab = "Sentiment", main = "Iphone Sentiment")
View(iphoneLargeMatrix)
plot(iPhoneLargeMatrix$iphonesentiment, ylab = "Sentiment", main = "Iphone Sentiment")
plot(iphoneLargeMatrix$iphonesentiment, ylab = "Sentiment", main = "Iphone Sentiment")
plot(iphoneLargeMatrix$iphonesentiment, ylab = "Sentiment", main = "Iphone Sentiment")
hist(iphoneLargeMatrix$iphonesentiment, xlim = c(-10,15), ylim = c(0,90000), breaks = 1000, xlab = "Iphone sentiment", main="Histogram of Iphone Sentiment")
str(iphoneLargeMatrix)
hist(iphoneDF$iphonesentiment, xlim = c(-10,15), ylim = c(0,90000), breaks = 1000, xlab = "Iphone sentiment", main="Histogram of Iphone Sentiment")
str(iphoneDF)
str(iphone)
hist(iphone$iphonesentiment, xlim = c(-10,15), ylim = c(0,90000), breaks = 1000, xlab = "Iphone sentiment", main="Histogram of Iphone Sentiment")
hist(iphone$iphonesentiment, xlim = c(-0,5), ylim = c(0,90000), breaks = 1000, xlab = "Iphone sentiment", main="Histogram of Iphone Sentiment")
plot(iphone$iphonesentiment, ylab = "Sentiment", main = "Iphone Sentiment")
View(iphoneLargeMatrix)
summary(iphoneLargeMatrix)
str()
str(iphoneLargeMatrix)
plot(iphoneRC$iphonesentiment, ylab = "Sentiment", main = "Iphone Sentiment")

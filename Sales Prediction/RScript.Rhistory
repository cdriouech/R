install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("readr")
library(caret)
library(readr)
install.packages("lazyeval")
library(lazyeval)
install.packages("zeallot")
library(zeallot)
install.packages("pkgconfig")
library(pkgconfig)
install.packages("backports")
library(backports)
install.packages("assertthat")
library(assertthat)
install.packages("gower")
library(gower)
install.packages("ModelMetrics")
library(ModelMetrics)
existing_products <- read_csv("~/UT Data Analytics Course/Course 2/Task 3 Customer Preferences/existingproductattributes2017.csv")
View(existing_products)
newDataFrame <- dummyVars(" ~ .", data = existing_products)
readyData <- data.frame(predict(newDataFrame, newdata = existing_products))
View(readyData)
str(readyData)
summary(readyData)
readyData$BestSellersRank <- NULL
summary(readyData)
corrData <- cor(readyData)
View(corrData)
corrData
install.packages("corrplot")
library(corrplot)
corrplot(corrData)
set.seed(334)
trainSize<-round(nrow(readyData)*0.7)
testSize<-nrow(readyData)-trainSize
trainSize
training_indices<-sample(seq_len(nrow(readyData)),size =trainSize)
trainSet<-readyData[training_indices,]
testSet<-readyData[-training_indices,]
lmodel<-lm(Volume~ ., trainSet)
summary(lmodel)
library(e1071)
model_svm <- svm(Volume ~ . , trainSet)
summary(model_svm)
set.seed(998)
inTraining <- createDataPartition(readyData$Volume, p = .75, list = FALSE)
trainSet<-readyData[inTraining,]
lmodel<-lm(Volume~ ., trainSet)
summary(lmodel)
testSet<-readyData[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
rfmodel <- train(Volume~., data = trainSet, method = "rf", trControl=fitControl, tuneLength = 1)
rfmodel
model_svm <- svm(Volume ~ . , trainSet)
model_svm
rfmodel <- train(Volume~., data = trainSet, method = "rf", trControl=fitControl, tuneLength = 2)
rfmodel
gbmodel <- gbm(Volume ~ . ,trainSet,distribution = "gaussian",n.trees = 10000,
shrinkage = 0.01, interaction.depth = 4)
View(lmodel)
View(model_svm)
View(trainSet)
gbmodel=gbm(Volume ~ . ,data = readyData[trainSet,],distribution = "gaussian",n.trees = 10000, shrinkage = 0.01, interaction.depth = 4)
install.packages("gbm")
gbmodel=gbm(Volume ~ . ,data = readyData[trainSet,],distribution = "gaussian",n.trees = 10000, shrinkage = 0.01, interaction.depth = 4)
library(gbm)
gbmodel=gbm(Volume ~ . ,data = readyData[trainSet,],distribution = "gaussian",n.trees = 10000, shrinkage = 0.01, interaction.depth = 4)
gbmodel <- gbm(Volume ~ . ,trainSet,distribution = "gaussian",n.trees = 10000,
shrinkage = 0.01, interaction.depth = 4)
gbmodel
summary(gbmodel)
gbmodel <- gbm( formula = Volume ~ ., distribution = "gaussian",n.trees = 10000,
shrinkage = 0.01, interaction.depth = 4)
gbmodel <- gbm( formula = Volume ~ ., data=trainSet , distribution = "gaussian",n.trees = 10000,
shrinkage = 0.01, interaction.depth = 4)
gbmodel
summary(gbmodel)
corrplot(corrData, Ntop=10)
svmpred <- predict(model_svm, newdata = testSet)
svmpred
rfpred <- predict(rfmodel, newdata = testSet)
rfpred
gbpred <- predict(gbmodel, newdata = testSet)
gbpred <- predict(gbmodel, newdata = testSet, n.trees = gbmodel$n.trees)
gbpred
str(readyData)
summary(readyData)
gbpred <- predict(gbmodel, newdata = testSet, type = c("class", "probability"), ...)
gbpred <- predict(gbmodel, newdata = testSet, type = c("class", "probability"))
rfpred <- predict(rfmodel, newdata = testSet, type = c("class", "probability"))
rfmodel
gbmodel <- gbm( formula = Volume ~ ., data=trainSet , distribution = "gaussian",n.trees = 1000,
shrinkage = 0.01, interaction.depth = 4)
gbmodel <- gbm( formula = Volume ~ ., data=trainSet , distribution = "gaussian",n.trees = 1000, shrinkage = 0.01, interaction.depth = 4)
library(caret)
set.seed(998)
gbmodel <- gbm( formula = Volume ~ ., data=trainSet , distribution = "gaussian",n.trees = 1000, shrinkage = 0.01, interaction.depth = 4)
library(gbm)
gbmodel <- gbm( formula = Volume ~ ., data=trainSet , distribution = "gaussian",n.trees = 1000, shrinkage = 0.01, interaction.depth = 4)
gbmodel
summary(gbmodel)
gbpred <- predict(gbmodel, newdata = testSet, n.trees = gbmodel$n.trees)
gbpred
model_svm
set.seed(1099)
svmodel <- train(Volume ~., data = trainSet, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
install.packages("trctrl")
library(trctrl)
summary(model_svm)
print(model_svm)
svmodel <- train(Volume ~., data = trainSet, method = "svmLinear",
trControl=fitControl,
preProcess = c("center", "scale"),
tuneLength = 10)
model_svm
summary(model_svm)
confusionMatrix(svmpred, testSet$Volume )
confusionMatrix(svmpred, testSet$Volume)
confusionMatrix(rfmodel, testSet$Volume)
confusionMatrix(gbmodel, testSet$Volume)
confusionMatrix(svmpred, testSet)
anyNA(readyData)
library(caret)
model_svm
summary(model_svm)
summary(rfmodel)
rfmodel
svmodel
svmpred <- predict(svmodel, testSet)
svmpred
library(readr)
newproductattrib <- read_csv("~/UT Data Analytics Course/Course 2/Task 3 Customer Preferences/newproductattributes2017.csv")
View(newproductattrib)
newDataFrame2 <- dummyVars(" ~ .", data = newproductattrib)
readyData2 <- data.frame(predict(newDataFrame2, newdata = newproductattrib))
str(readyData2)
summary(readyData2)
is.na(readyData2)
View(readyData2)
finalPred <- predict(rfmodel, readyData2)
finalPred
output <- newproductattributes2017
output <- newproductattrib
output$predictions <- finalPred
write.csv(output, file="C2.T3output.csv", row.names = TRUE)

install.packages("arules")
library(arules)
install.packages("arulesViz")
library(arulesViz)
??arules
??arulesViz
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket", rm.duplicates = TRUE)
View(Trans)
View(Trans)
View(Trans)
Trans <- read.transactions("ElectronidexTransactions2017.csv", format = "basket",sep = ",", rm.duplicates = TRUE)
Trans
View(Trans)
View(Trans)
inspect(Trans)
length (Trans)
size (Trans)
LIST(Trans)
itemLabels(Trans)
itemFrequencyPlot(Trans)
image(Trans)
image(sample(DatasetName, 1000))
image(sample(Trans, 1000))
image(sample(Trans, 5000))
image(sample(Trans, 5000))
image(sample(Trans, 1000))
image(sample(Trans, 500))
Rules<- apriori (Trans, parameter = list(supp = 0.1, conf = 0.8))
inspect(Rules)
inspect(Rules)
inspect(Rules[1000], ruleSep = "---->", itemSep = " + ", setStart = "", setEnd ="",
linebreak = FALSE)
inspect(Rules[100], ruleSep = "---->", itemSep = " + ", setStart = "", setEnd ="",
linebreak = FALSE)
inspect(Rules[100])
inspect(Rules[10])
summary(Rules)
Rules <- apriori(Trans,
parameter = list(supp = 0.5, conf = 0.9, target = "rules"))
Rules <- apriori(Trans,
parameter = list(supp = 0.5, conf = 0.9, target = "rules"), minlen=2)
Rules <- apriori(Trans, parameter = list(supp = 0.5, conf = 0.9, target = "rules", minlen=2)
Rules <- apriori(Trans,
parameter = list(supp = 0.5, conf = 0.9, target = "rules"))
Rules
Rules<- apriori (Trans, parameter = list(supp = 0.1, conf = 0.9))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.9))
Rules<- apriori (Trans, parameter = list(supp = 0.1, conf = 1.))
Rules<- apriori (Trans, parameter = list(supp = 0.1, conf = 1.0))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.9))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.9, minlen = 2))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.9, minlen = 3))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 1.0, minlen = 3))
Rules<- apriori (Trans, parameter = list(supp = 0.5, conf = 1.0, minlen = 3))
Rules<- apriori (Trans, parameter = list(supp = 0.5, conf = 1.5, minlen = 3))
Rules<- apriori (Trans, parameter = list(supp = 0.5, conf = 1.0, minlen = 3))
Rules<- apriori (Trans, parameter = list(supp = 0.5, conf = 2.0, minlen = 3))
Rules<- apriori (Trans, parameter = list(supp = 0.5, conf = 2, minlen = 3))
Rules<- apriori (Trans, parameter = list(supp = 0.5, conf = 0.9, minlen = 3))
Rules<- apriori (Trans, parameter = list(supp = 0.5, conf = 0.9, minlen = 4))
Rules<- apriori (Trans, parameter = list(supp = 0.5, conf = 0.9, minlen = 1))
summary(Rules)
inspect(Rules)
Rules<- apriori (Trans, parameter = list(supp = 0.5, conf = 0.99, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.99, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.19, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.29, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.39, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.09, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.9, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.2, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.3, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.4, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.01, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.2, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.2, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.3, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.4, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 2))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 3))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 4))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 2))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 3))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
inspect(head(sort(Rules, by = "confidence"), 3))
inspect(head(sort(Rules, by = "confidence"), 4))
inspect(head(sort(Rules, by = "confidence"))
inspect(head(sort(Rules, by = "confidence")))
Rules<- apriori (Trans, parameter = list(supp = 0.02, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.02, conf = 0.2, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0, conf = 0.2, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.11, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.02, conf = 0.1, minlen = 1))
Rules<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 1))
> inspect(head(sort(Rules, by = "confidence"), 3))
inspect(head(sort(Rules, by = "confidence"), 3))
inspect(head(sort(Rules, by = "confidence"), 527))
inspect(head(sort(Rules, by = "confidence"), 528))
inspect(head(sort(Rules, by = "confidence"), 548))
inspect(head(sort(Rules, by = "confidence"), 548))
summary(Rules)
inspect(head(sort(Rules, by = "confidence"), 10))
inspect(sort( Trans, by = "Type of Measurement"))
inspect(sort( Rules, by = "Type of Measurement"))
inspect(sort( Rules, by = "confidence"))
inspect(sort( Rules, by = "confidence"), 10)
is.redundant(Rules)
Rulestest<- apriori (Trans, parameter = list(supp = 0.05, conf = 0.1, minlen = 1))
Rules.sorted <- sort(Rules, by="lift")
inspect(Rules.sorted)
subset.matrix <- is.subset(Rules.sorted, Rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
rules.pruned <- rules.sorted[!redundant]
Rules.pruned <- Rules.sorted[!redundant]
inspect(Rules.pruned)
View(Rules.pruned)
View(Trans)
View(Rules)
View(Rules.pruned)
View(Rules.sorted)
View(Rulestest)
View(Rulestest)
View(Rules.pruned)
View(Rules)
plot(rules)
plot(Rules)
install.packages("arulesViz")
library(arulesViz)
install.packages("arules, independencies="TRUE")
install.packages("arules, dependencies="TRUE")
install.packages("arules, dependencies=TRUE)
library(arulesViz)
install.packages("caTools")
library(caTools)
library(arulesViz)
plot(Rules)
Trans
summary(Trans)
subRules<-Rules[quality(Rules)$confidence>0.1]
plot(subRules)
plot(subRules, jitter = 0)
plot(subRules, jitter = 0)
plot(Rules)
plot(subRules,method="two-key plot")
TopRules <- head(sort(Rules, by = "confidence"), 10)
plot(TopRules, method = "graph",  engine = "htmlwidget")
plot(TopRules, method = "graph",  control=list(type="items"))
plot(TopRules, method = "graph",  engine = "htmlwidget")
plot(TopRules, method = "graph",  control=list(type="items"))
library(arulesViz)
library(arules)
library(arulesViz)
is.redundant(Rules, measure = "confidence")
inspect(Rules[is.redundant(Rules)])
inspect(Rules[!is.redundant(Rules)])
CleanRules <- inspect(Rules[!is.redundant(Rules)])
CleanRules
inspect(Rules[is.redundant(Rules)])
itemFrequencyPlot(Trans,topN=20,type="relative",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
install.packages("brewer.pal")
library(brewer.pal)
library(brewer.pal)
itemFrequencyPlot(Trans,topN=20,type="relative",main="Relative Item Frequency Plot")
install.packages("RColorBrewer")
library(RColorBrewer)
itemFrequencyPlot(Trans,topN=20,type="relative",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
itemFrequencyPlot(Trans,topN=10,type="relative",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
itemFrequencyPlot(Trans,topN=10,type="absolute",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
itemFrequencyPlot(Trans,topN=10,type="absolute",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
library(arules)
library(arulesViz)
itemFrequencyPlot(Trans,topN=10,type="absolute",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
library(brewer.pal)
install.packages("brewer.pal")
library(brewer.pal)
itemFrequencyPlot(Trans,topN=10,type="absolute",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
itemFrequencyPlot(Trans,topN=10,type="absolute",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
itemFrequencyPlot(Trans,topN=20,type="relative",main="Relative Item Frequency Plot")
itemFrequencyPlot(Trans,topN=20,type="relative",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
library(RColorBrewer)
itemFrequencyPlot(Trans,topN=20,type="relative",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
itemFrequencyPlot(Trans,topN=10,type="absolute",col=brewer.pal(8,'Pastel2'),main="Relative Item Frequency Plot")
> Rules2<- apriori (Trans, parameter = list(supp = 0.05, conf = 0.1))
Rules2<- apriori (Trans, parameter = list(supp = 0.05, conf = 0.1))
Rules2
summary(Rules2)
inspect(Rules2)
> image(sample(Trans, 500))
image(sample(Trans, 500))
image(sample(Trans))
image(Trans)
plot(Rules, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, ...)
plot(Rules, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL)
plot(Rules, method = NULL, measure = "support", shading = "lift",
engine = "interactive")
plot(Rules, method = NULL, measure = "support", shading = "lift",
engine = "interactive" jitter = 0)
plot(Rules, method = NULL, measure = "support", shading = "lift",
engine = "interactive", jitter = 0)
image(sample(Trans, 500))
image(sort(Trans))
is.na(Trans)
Rules3<- apriori (Trans, parameter = list(supp = 0.5, conf = 0.01))
Rules3<- apriori (Trans, parameter = list(supp = 0.9, conf = 0.01))
Rules3<- apriori (Trans, parameter = list(supp = 0.9, conf = 0.1))
Rules3<- apriori (Trans, parameter = list(supp = 0.9, conf = 1))
Rules3<- apriori (Trans, parameter = list(supp = 0.05, conf = 1))
Rules3<- apriori (Trans, parameter = list(supp = 0.5, conf = 1))
Rules3<- apriori (Trans, parameter = list(supp = 1, conf = 1))
Rules3<- apriori (Trans, parameter = list(supp = 1, conf = 0.1))
Rules3<- apriori (Trans, parameter = list(supp = 1, conf = 0.9))
Rules3<- apriori (Trans, parameter = list(supp = 0.01, conf = 0.9))
plot(TopRules, method = "graph",  engine = "htmlwidget")
plot(TopRules, method = "graph",  control=list(type="items"))
plot(TopRules, method = "graph",  control=list(type="items"))
